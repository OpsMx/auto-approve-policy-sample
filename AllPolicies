Autopilot::
----------------
#Policy fails if the verification score is below 70
package opa.pipelines.autoapprovaltest
score {
input.AUTOPILOT.output[0].logScore < 70
}

deny["Overall Score less than 70"] {
score
}
Jira:
-------
#Policy fails if the jira is having Highest priority issue

package jiraapprovalpolicy

deny[msg] {
some i
status = input.JIRA.output[i].status;
jiraId = input.JIRA.output[i].jiraId;
priority = input.JIRA.output[i].priority;
status != "Done";
msg = sprintf("for jira id '%v' status is '%v' ",[jiraId,status])

}
Jenkins:
--------------
#Policy fails if the Jenkins build is fail

package pipeline.jiraapprovalpolicy

deny[msg] {
some i
result = input.JENKINS.output[i].result;
buildId = input.JENKINS.output[i].buildId;

result != "SUCCESS";
msg = sprintf("for buildId '%v' result is '%v' ",[buildId,result])

}

SonarQube
--------------------
package pipeline.SonarQube


ReliabilityRating {
some i;
RRating = input.SONARQUBE.output[i].reliabilityRating;
contains(RRating,"E")
}
SecurityRating {
some i;
SRating = input.SONARQUBE.output[i].securityRating;
contains(SRating,"E")
}
Bugs {
some i;
bugs = input.SONARQUBE.output[i].bugs;
bugsN=to_number(bugs)
bugsN>100
}
deny["RRating is E for atleast one project '%v'"]{ReliabilityRating}
deny["RRating is E for atleast one proecject"]{SecurityRating}
deny["Bugs are >100 for atleast one project"]{Bugs}
